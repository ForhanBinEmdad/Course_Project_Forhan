# -*- coding: utf-8 -*-
"""prob4.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19q5Mrkv9ZR6y8APgtavGS6iuZ8W2KFNS

**Importing data**
"""

import pandas as pd
import numpy
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

## Upload files to your notebook 
from google.colab import files
uploaded = files.upload()
for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

## Upload files to your notebook 
from google.colab import files
uploaded = files.upload()
for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

## Upload files to your notebook 
from google.colab import files
uploaded = files.upload()
for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

train_data = np.load('hw1_train.data.npz')

test_data = np.load('hw1_test.data.npz')

valid_data = np.load('hw1_valid.data.npz')

print(train_data.files)

print(test_data.files)

print(valid_data.files)

train_data['X_train']

x_train = train_data['X_train']
y_train = train_data['y_train']
x_test = test_data['X_test']
y_test = test_data['y_test']
x_valid = valid_data['X_valid']
y_valid = valid_data['y_valid']

"""**Naive Bayes:**"""

#Import Gaussian Naive Bayes model
from sklearn.naive_bayes import GaussianNB

def accuracy_metrics(model, true_label, data):
    prediction = model.predict(data)
    acc = accuracy_score(true_label, prediction)
    auc_roc = roc_auc_score(true_label, prediction)
    return [acc, auc_roc]

result_nb =[]

#Create a Gaussian Classifier
gnb_model = GaussianNB()

# Train the model using the training sets
gnb_model.fit(x_train,y_train)

output_train_nb = accuracy_metrics(gnb_model, y_train, x_train)
output_valid_nb = accuracy_metrics(gnb_model, y_valid, x_valid)
output_test_nb = accuracy_metrics(gnb_model, y_test, x_test)
      
result_nb.append(output_train_nb+output_valid_nb+output_test_nb)

s_nb = pd.DataFrame(result_nb, columns=['Traindata Accuracy', 'Traindata AUROC', 'Validationdata Accuracy', 'Validationdata AUROC', 'Testdata Accuracy', 'Testdata AUROC'])

import seaborn as sns

cm = sns.light_palette("steelblue", as_cmap=True)

Final_output_nb = s_nb.style.background_gradient(cmap=cm)
Final_output_nb

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import roc_auc_score, accuracy_score
from IPython.display import HTML

def accuracy_metrics(model, true_label, data):
    prediction = model.predict(data)
    acc = accuracy_score(true_label, prediction)
    auc_roc = roc_auc_score(true_label, prediction)
    return [acc, auc_roc]

q= [1,2,3,4,5]
w=[2,3,4,5]
e=['gini','entropy']

result =[]
for a in q:
  for b in w:
    for c in e:
      classifiermodel_DT = DecisionTreeClassifier(criterion=c, max_depth=b, min_samples_leaf=a)
      classifiermodel_DT.fit(x_train,y_train)
      output_train = accuracy_metrics(classifiermodel_DT, y_train, x_train)
      output_valid = accuracy_metrics(classifiermodel_DT, y_valid, x_valid)
      output_test = accuracy_metrics(classifiermodel_DT, y_test, x_test)
      
      result.append(output_train+output_valid+output_test+[c,b,a])

s = pd.DataFrame(result, columns=['Traindata Accuracy', 'Traindata AUROC', 'Validationdata Accuracy', 'Validationdata AUROC', 'Testdata Accuracy', 'Testdata AUROC','criterion','max-depth','min_samples_leaf'])

import seaborn as sns

cm = sns.light_palette("steelblue", as_cmap=True)

Final_output = s.style.background_gradient(cmap=cm)
Final_output

"""**SVM**"""

from sklearn import svm

def accuracy_metrics(model, true_label, data):
    prediction = model.predict(data)
    acc = accuracy_score(true_label, prediction)
    auc_roc = roc_auc_score(true_label, prediction)
    return [acc, auc_roc]

k=['rbf','poly','linear']
l=[1,10,100]

result_svm =[]
for z in k:
  for x in l:
    classifiermodel_SVM = svm.SVC(C=x, kernel=z)
    classifiermodel_SVM.fit(x_train,y_train)
    output_train_svm = accuracy_metrics(classifiermodel_SVM, y_train, x_train)
    output_valid_svm = accuracy_metrics(classifiermodel_SVM, y_valid, x_valid)
    output_test_svm = accuracy_metrics(classifiermodel_SVM, y_test, x_test)
      
    result_svm.append(output_train_svm+output_valid_svm+output_test_svm+[x,z])

s_svm = pd.DataFrame(result_svm, columns=['Traindata Accuracy', 'Traindata AUROC', 'Validationdata Accuracy', 'Validationdata AUROC', 'Testdata Accuracy', 'Testdata AUROC','C','Kernel'])

import seaborn as sns

cm = sns.light_palette("steelblue", as_cmap=True)

Final_output_svm = s_svm.style.background_gradient(cmap=cm)
Final_output_svm

"""**Deep Learning model**"""

from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.optimizers import RMSprop, Adam , Adagrad

model = Sequential()

model.add(Dense(12 , input_dim=x_train.shape[1], activation='relu'))
model.add(Dense(8, activation='tanh'))
model.add(Dense(1, activation='sigmoid'))

# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

print(model.summary())

model.fit(x_train, y_train, epochs=15, batch_size=10,  verbose=2)

# calculate predictions
predictions = model.predict(x_test)

cnf_matrix = confusion_matrix(y_test, pred)
print(cnf_matrix)

# Compile model
model.compile(loss='binary_crossentropy', optimizer='RMSprop', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=15, batch_size=10,  verbose=2)

# calculate predictions
predictions = model.predict(x_test)

cnf_matrix = confusion_matrix(y_test, pred)
print(cnf_matrix)

# Compile model
model.compile(loss='binary_crossentropy', optimizer='Adagrad', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=15, batch_size=10,  verbose=2)

# calculate predictions
predictions = model.predict(x_test)

cnf_matrix = confusion_matrix(y_test, pred)
print(cnf_matrix)

"""96% accuracy found for ICU mortality prediction from confusion matrix"""